from __future__ import annotations
from typing import Optional, Dict, Any, List
from pydantic import Field
from datetime import date
from pyatlan.model.core import AtlanObject, Classification
from pyatlan.model.enums import CertificateStatus, EntityStatus, google_datastudio_asset_type, powerbi_endorsement, \
    icon_type

class Internal(AtlanObject):
    """For internal usage"""

{% for struct in struct_defs %}
class {{struct.name}}(AtlanObject):
    """Description"""
    class Attributes(AtlanObject):
        {%- for attribute_def in struct.attribute_defs %}
        {%- set type = attribute_def.type_name | get_type %}
        {{attribute_def.name | to_snake_case }}: {% if attribute_def.is_optional %}Optional[{% endif %}{{type}}{% if attribute_def.is_optional %}]{% endif %} = Field(None, description='' , alias='{{attribute_def.name}}')
        {%- endfor %}
{% endfor %}
{% for entity_def in entity_defs %}
{%- set super_classes = ['AtlanObject'] if not entity_def.super_types else entity_def.super_types -%}
class {{ entity_def.name }}({{super_classes|join(', ')}}):
    """Description"""
{%- if entity_def.name == "Referenceable"  %}
    class Attributes(AtlanObject):
        {%- for attribute_def in entity_def.attribute_defs %}
        {{attribute_def.name | to_snake_case}}: {% if attribute_def.isOptional %}Optional[{% endif %}str{% if attribute_def.isOptional %}]{% endif %} = Field(None, description='', alias='{{attribute_def.name}}')
        {%- endfor %}
        {%- for attribute_def in entity_def.relationship_attribute_defs %}
        {{attribute_def.name | to_snake_case }}: {% if attribute_def.isOptional %}Optional[{% endif %}str{% if attribute_def.isOptional %}]{% endif %} = Field(None, description='', alias='{{attribute_def.name}}')
        {%- endfor %}
    attributes: Optional['{{entity_def.name}}.Attributes'] = Field(
        None,
        description='Map of attributes in the instance and their values. The specific keys of this map will vary '
                    'by type, so are described in the sub-types of this schema.\n',
    )
    businessAttributes: Optional[Dict[str, Any]] = Field(
        None,
        description='Map of custom metadata attributes and values defined on the entity.\n',
    )
    created_by: Optional[str] = Field(
        None,
        description='Username of the user who created the object.\n',
        example='jsmith',
    )
    create_time: Optional[int] = Field(
        None,
        description='Time (epoch) at which this object was created, in milliseconds.\n',
        example=1648852296555,
    )
    guid: Optional[str] = Field(
        None,
        description='Unique identifier of the entity instance.\n',
        example='917ffec9-fa84-4c59-8e6c-c7b114d04be3',
    )
    is_incomplete: Optional[bool] = Field(False, description='', example=False)
    labels: Optional[List[str]] = Field(None, description='Internal use only.')
    relationship_attributes: Optional[Dict[str, Any]] = Field(
        None,
        description='Map of relationships for the entity. The specific keys of this map will vary by type, '
                    'so are described in the sub-types of this schema.\n',
    )
    status: Optional[EntityStatus] = Field(
        None,
        description="Status of the entity",
        example=EntityStatus.ACTIVE
    )
    typeName: Optional[str] = Field(
        None, description='Name of the type definition that defines this instance.\n'
    )
    updated_by: Optional[str] = Field(
        None,
        description='Username of the user who last updated the object.\n',
        example='jsmith',
    )
    update_time: Optional[int] = Field(
        None,
        description='Time (epoch) at which this object was last updated, in milliseconds.\n',
        example=1649172284333,
    )
    version: Optional[int] = Field(
        None, description='Version of this object.\n', example=2
    )
    classifications: Optional[list[Classification]] = Field(
        None, description="classifications"
    )
    display_text: Optional[str] = Field(
        None,
        description="Human-readable name of the entity..\n",
    )
    entity_status: Optional[str] = Field(
        None,
        description="Status of the entity (if this is a related entity).\n",
    )
    relationship_guid: Optional[str] = Field(
        None,
        description="Unique identifier of the relationship (when this is a related entity).\n",
    )
    relationship_status: Optional[str] = Field(
        None,
        description="Status of the relationship (when this is a related entity).\n",
    )
    relationship_type: Optional[str] = Field(
        None,
        description="Status of the relationship (when this is a related entity).\n",
    )
{%- else %}
    {%- if entity_def.attribute_defs %}
    class Attributes({{super_classes|join(',')}}.Attributes):
        {%- for attribute_def in entity_def.attribute_defs %}
        {%- set type = attribute_def.typeName | get_type %}
        {{attribute_def.name | to_snake_case }}: {% if attribute_def.isOptional %}Optional[{% endif %}{{type}}{% if attribute_def.isOptional %}]{% endif %} = Field(None, description='' , alias='{{attribute_def.name}}')
        {%- endfor %}
        {%- for attribute_def in entity_def.relationship_attribute_defs %}
        {%- set type = attribute_def.typeName | get_type %}
        {{attribute_def.name | to_snake_case }}: {% if attribute_def.isOptional %}Optional[{% endif %}{{type}}{% if attribute_def.isOptional %}]{% endif %} = Field(None, description='',  alias='{{attribute_def.name}}') # relationship
        {%- endfor %}
    attributes: Optional['{{entity_def.name}}.Attributes'] = Field(
        None,
        description='Map of attributes in the instance and their values. The specific keys of this map will vary by '
                    'type, so are described in the sub-types of this schema.\n',
    )
    {% endif %}
{%- endif %}
{% endfor %}
{% for entity_def in entity_defs %}
{{entity_def.name}}.Attributes.update_forward_refs()
{% endfor %}