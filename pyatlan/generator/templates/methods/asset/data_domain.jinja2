
    @classmethod
    # @validate_arguments()
    @init_guid
    def create(
        cls,
        *,
        name: StrictStr,
        icon: Optional[AtlanIcon] = None,
        parent_domain: Optional[DataDomain] = None,
        parent_domain_qualified_name: Optional[StrictStr] = None,
    ) -> DataDomain:
        validate_required_fields(["name"], [name])
        attributes = DataDomain.Attributes.create(
            name=name,
            icon=icon,
            parent_domain=parent_domain,
            parent_domain_qualified_name=parent_domain_qualified_name,
        )
        return cls(attributes=attributes)

    @classmethod
    def create_for_modification(
        cls: type[SelfAsset],
        qualified_name: str = "",
        name: str = "",
    ) -> SelfAsset:
        validate_required_fields(["name", "qualified_name"], [name, qualified_name])
        # Split the data domain qualified_name to extract data mesh info
        fields = qualified_name.split("/")
        # for domain and subdomain
        if len(fields) not in (3, 5):
            raise ValueError(f"Invalid data domain qualified_name: {qualified_name}")
        mesh_slug, mesh_abbreviation = fields[-1], fields[-1]
        return cls(
            attributes=cls.Attributes(
                qualified_name=qualified_name,
                name=name,
                mesh_slug=mesh_slug,
                mesh_abbreviation=mesh_abbreviation,
            )
        )
