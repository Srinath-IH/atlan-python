
    @classmethod
    # @validate_arguments()
    def create(
        cls,
        *,
        name: str,
        connector_type: AtlanConnectorType,
        admin_users: Optional[list[str]] = None,
        admin_groups: Optional[list[str]] = None,
        admin_roles: Optional[list[str]] = None,
        client: Optional[AtlanClient] = None,
    )->{{ entity_def.name }}:
        if not client:
            client = AtlanClient.get_default_client_or_fail()
        validate_required_fields(["name", "connector_type"], [name, connector_type])
        if not admin_users and not admin_groups and not admin_roles:
            raise ValueError(
                "One of admin_user, admin_groups or admin_roles is required"
            )
        if admin_roles:
            for role_id in admin_roles:
                if not client.role_cache.get_name_for_id(role_id):
                    raise ValueError(
                        f"Provided role ID {role_id} was not found in Atlan."
                    )
        if admin_groups:
            for group_alias in admin_groups:
                if not client.group_cache.get_id_for_alias(group_alias):
                    raise ValueError(
                        f"Provided group name {group_alias} was not found in Atlan."
                    )
        if admin_users:
            for username in admin_users:
                if not client.user_cache.get_id_for_name(username):
                    raise ValueError(
                        f"Provided username {username} was not found in Atlan."
                    )
        attr = cls.Attributes(
            name=name,
            qualified_name=connector_type.to_qualified_name(),
            connector_name=connector_type.value,
            category=connector_type.category.value,
            admin_users=admin_users or [],
            admin_groups=admin_groups or [],
            admin_roles=admin_roles or [],
        )
        return cls(attributes=attr)
