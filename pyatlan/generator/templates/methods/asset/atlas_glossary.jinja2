
    @root_validator()
    def _set_qualified_name_fallback(cls, values):
        attributes = values.get("attributes")
        unique_attributes = values.get("unique_attributes")
        qualified_name = attributes.qualified_name if attributes else None

        if not qualified_name:
            # If the qualified name is present inside unique attributes (in case of a related entity)
            if unique_attributes and unique_attributes.get("qualifiedName"):
                values["attributes"].qualified_name = unique_attributes["qualifiedName"]
            # Otherwise, set the qualified name to the GUID
            # to avoid collisions when creating glossary objects
            else:
                values["attributes"].qualified_name = values["guid"]
        return values

    @classmethod
    @init_guid
    def creator(
        cls, *, name: StrictStr, icon: Optional[AtlanIcon] = None
    ) -> AtlasGlossary:
        validate_required_fields(["name"], [name])
        return AtlasGlossary(
            attributes=AtlasGlossary.Attributes.create(name=name, icon=icon)
        )

    @classmethod
    @init_guid
    def create(
        cls, *, name: StrictStr, icon: Optional[AtlanIcon] = None
    ) -> AtlasGlossary:
        warn(
            (
                "This method is deprecated, please use 'creator' "
                "instead, which offers identical functionality."
            ),
            DeprecationWarning,
            stacklevel=2,
        )
        return cls.creator(name=name, icon=icon)
