
        @classmethod
        @init_guid
        def creator(
            cls,
            *,
            name: str,
            airflow_dag_qualified_name: str,
        ) -> AirflowTask.Attributes:
            validate_required_fields(
                ["name", "airflow_dag_qualified_name"], [name, airflow_dag_qualified_name]
            )
            # Split the airflow_dag_qualified_name to extract necessary information
            fields = airflow_dag_qualified_name.split("/")
            if len(fields) != 4:
                raise ValueError("Invalid airflow_dag_qualified_name")
            try:
                connector_type = AtlanConnectorType(fields[1])  # type:ignore
            except ValueError as e:
                raise ValueError("Invalid airflow_dag_qualified_name") from e

            return AirflowTask.Attributes(
                name=name,
                airflow_dag_qualified_name=airflow_dag_qualified_name,
                connection_qualified_name=f"{fields[0]}/{fields[1]}/{fields[2]}",
                qualified_name=f"{airflow_dag_qualified_name}/{name}",
                connector_name=connector_type.value,
                airflow_dag=AirflowDag.ref_by_qualified_name(
                    airflow_dag_qualified_name
                ),
            )
