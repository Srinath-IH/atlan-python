
        @classmethod
        # @validate_arguments()
        @init_guid
        def create(cls, *, name: str, connection_qualified_name: str, data_studio_asset_type: GoogleDatastudioAssetType, gdsid: str) -> {{ entity_def.name }}.Attributes:
            validate_required_fields(
                ["name", "connection_qualified_name", "data_studio_asset_type"],
                [name, connection_qualified_name, data_studio_asset_type]
            )

            # Split the connection_qualified_name to extract necessary information
            fields = connection_qualified_name.split("/")
            if len(fields) != 3:
                raise ValueError("Invalid connection_qualified_name")

            try:
                connector_type = AtlanConnectorType(fields[1])  # type:ignore
            except ValueError as e:
                raise ValueError("Invalid connection_qualified_name") from e

            return {{ entity_def.name }}.Attributes(
                name=name,
                qualified_name=f"{connection_qualified_name}/{gdsid}",
                connection_qualified_name=connection_qualified_name,
                connector_name=connector_type.value,
                data_studio_asset_type=data_studio_asset_type,
            )
