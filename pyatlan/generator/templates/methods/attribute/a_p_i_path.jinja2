
        @classmethod
        # @validate_arguments()
        def create(cls, *, name: str, connection_qualified_name: str, apiPathRawURI: str, apiSpecQualifiedName: str) -> {{ entity_def.name }}.Attributes:
            validate_required_fields(
                ["name", "connection_qualified_name", "apiPathRawURI", "apiSpecQualifiedName"], [name, connection_qualified_name, apiPathRawURI, apiSpecQualifiedName]
            )

            # Split the apiSpecQualifiedName to extract necessary information
            fields = apiSpecQualifiedName.split("/")
            if len(fields) != 4:
                raise ValueError("Invalid apiSpecQualifiedName")

            try:
                connector_type = AtlanConnectorType(fields[1])  # type:ignore
            except ValueError as e:
                raise ValueError("Invalid apiSpecQualifiedName") from e

            return {{ entity_def.name }}.Attributes(
                name=name,
                apiPathRawURI=name,
                apiSpecQualifiedName=apiSpecQualifiedName,
                connection_qualified_name=f"{fields[0]}/{fields[1]}/{fields[2]}",
                qualified_name=f"{apiSpecQualifiedName}/{name}",
                connector_name=connector_type.value,
                apiSpec=APISpec.ref_by_qualified_name(apiSpecQualifiedName),
            )
